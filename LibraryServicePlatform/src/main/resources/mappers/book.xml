<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 为这个mapper指定一个唯一的namespace，相当于唯一的标识符。一般情况下名称名可
随意，但代理模式下，名称名必须为被代理接口的全限定名称。即namespace名称与UserDAO的全限定名对应-->
<mapper namespace="com.lsp.dao.BookDAO">

    <!--属性解释：
        id：该条insert语句的唯一标识符。一般情况下，id名称可随意，但在代理模式下，id名称必须要
        与被代理接口的方法名一致。
        parameterType：传入的参数类型。
        resultType：执行SQL语句后返回的数据类型
        #{}中的符号名称如果是简单类型就可随意，但如果是复杂类型就必须与对象中的属性名一致
    -->
    <insert id="insertBook" parameterType="com.lsp.domain.Book">
        insert into book(bId,bName) value(#{bookId},#{bookName})
    </insert>
    <!--删-->
    <delete id="deleteBook" parameterType="string">
        delete from book where bId=#{bookId}
    </delete>
    <!--改-->
    <update id="updateBook" parameterType="com.lsp.domain.complex.Entity">
        update book set bId=#{object.bookId},bName=#{object.bookName} where bId=#{id}
    </update>

    <!--书籍查询的统一入口-->
    <select id="findBook" parameterType="string" resultType="com.lsp.domain.Book">
        select * from book where bId like "%"#{queryCondition}"%" or bName like "%"#{queryCondition}"%" or author like "%"#{queryCondition}"%"
    </select>

    <!--精准查询，单本查询-->
    <select id="findBookById" parameterType="string" resultType="com.lsp.domain.Book">
        select * from book where bId=#{bId}
    </select>
    <!--测试语句-->
    <select id="resultMapTest" parameterType="string" resultMap="test">
        select * from book where bId=#{bookId}
    </select>
    <resultMap id="test" type="com.lsp.domain.BookTest">
        <id property="bookId" column="bId"/>
        <result property="bookId" column="bId"/>
        <result property="bookName" column="bName"/>
        <result property="bookAuthor" column="author"/>
        <result property="bookType" column="type"/>
        <result property="bookHot" column="hot"/>
    </resultMap>
    <select id="findBookByName" parameterType="string" resultType="com.lsp.domain.Book">
        select * from book where bName=#{bName}
    </select>
    <select id="findBookByAuthor" parameterType="string" resultType="com.lsp.domain.Book">
        select * from book where author=#{author}
    </select>

    <!--多本查询-->
    <select id="findAllBooks" resultType="com.lsp.domain.Book">
        select * from book
    </select>
    <select id="findBookByType" parameterType="string" resultType="com.lsp.domain.Book">
        select * from book where type=#{type}
    </select>

    <!--模糊查询，多本查询-->
    <select id="blurFindBookByAuthor" parameterType="string" resultType="com.lsp.domain.Book">
        select * from book where author like "%"#{author}"%"
    </select>
    <select id="blurFindBookByName" parameterType="string" resultType="com.lsp.domain.Book">
        select * from book where bName like "%"#{bName}"%"
    </select>

    <!--排序书籍-->
    <select id="sortBookByHot" resultType="com.lsp.domain.Book">
        select * from book order by hot desc
    </select>

    <!--column不做限制，可以为任意表的字段，而property须为type 定义的pojo属性-->
    <!--<resultMap id="唯一的标识" type="映射的pojo对象">-->
        <!--<id column="表的主键字段，或者可以为查询语句中的别名字段" jdbcType="字段类型" property="映射pojo对象的主键属性" />-->
        <!--<result column="表的一个字段（可以为任意表的一个字段）" jdbcType="字段类型" property="映射到pojo对象的一个属性（须为type定义的pojo对象中的一个属性）"/>-->
        <!--<association property="pojo的一个对象属性" javaType="pojo关联的pojo对象">-->
            <!--<id column="关联pojo对象对应表的主键字段" jdbcType="字段类型" property="关联pojo对象的主席属性"/>-->
            <!--<result  column="任意表的字段" jdbcType="字段类型" property="关联pojo对象的属性"/>-->
        <!--</association>-->
        <!--&lt;!&ndash; 集合中的property须为oftype定义的pojo对象的属性&ndash;&gt;-->
        <!--<collection property="pojo的集合属性" ofType="集合中的pojo对象">-->
            <!--<id column="集合中pojo对象对应的表的主键字段" jdbcType="字段类型" property="集合中pojo对象的主键属性" />-->
            <!--<result column="可以为任意表的字段" jdbcType="字段类型" property="集合中的pojo对象的属性" />-->
        <!--</collection>-->
    <!--</resultMap>-->


    <!--<collection column="传递给嵌套查询语句的字段参数" property="pojo对象中集合属性" ofType="集合属性中的pojo对象" select="嵌套的查询语句" >-->
    <!--</collection>-->

    <!--注意：<collection>标签中的column：要传递给select查询语句的参数，如果传递多个参数，格式为column= ” {参数名1=表字段1,参数名2=表字段2} ；-->
</mapper>